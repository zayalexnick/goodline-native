adfd7a7b4594c978d6fb2558a14a0afa
"use strict";

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const instance_1 = __importDefault(require("~/api/instance"));

const List_1 = require("~/screens/News/List");

const axios_mock_adapter_1 = __importDefault(require("axios-mock-adapter"));

const PendingEnum_1 = __importDefault(require("~/mobx/enums/PendingEnum"));

describe('News List', () => {
  const response = [];
  const mock = new axios_mock_adapter_1.default(instance_1.default);
  mock.onGet('/top-headlines?sources=lenta').reply(200, response);
  let store;
  beforeEach(() => store = new List_1.NewsStore());
  it('get news', () => __awaiter(this, void 0, void 0, function* () {
    yield store.getItems();
    expect(store.pending).toBe(PendingEnum_1.default.Loaded);
    expect(store.items).toEqual(response);
  }));
});